{"version":3,"sources":["hexToRGB.js","Popup.js","serviceWorker.js","index.js"],"names":["hex","replace","m","r","g","b","result","exec","parseInt","Popup","ENV_EXTENSION","chrome","tabs","React","useState","isFirstRun","setIsFirstRun","statusLabel","setStatusLabel","colourVertical","setColourVertical","opacityVertical","setOpacityVertical","baselineVertical","setBaselineVertical","colourHorizontal","setColourHorizontal","opacityHorizontal","setOpacityHorizontal","baselineHorizontal","setBaselineHorizontal","handleColour","e","currentTarget","dataset","grid","value","handleBaseline","handleOpacity","useEffect","executeScript","file","runtime","onMessage","addListener","message","status","console","log","storage","error","colourVerticalRGB","hexToRGB","vertical","red","green","blue","opacity","baseline","colourHorizontalRGB","horizontal","code","className","htmlFor","type","id","data-grid","onChange","min","max","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c9b2bc3.chunk.js","sourcesContent":["export default function(hex) {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function(m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n      }\n    : null;\n}\n","/*global chrome*/\nimport React from \"react\";\nimport \"./Popup.css\";\nimport hexToRGB from \"./hexToRGB\";\n\nfunction Popup() {\n  const ENV_EXTENSION = chrome && chrome.tabs;\n  const [isFirstRun, setIsFirstRun] = React.useState(true);\n  const [statusLabel, setStatusLabel] = React.useState(\"loading...\");\n  const [colourVertical, setColourVertical] = React.useState(\"#ff0000\");\n  const [opacityVertical, setOpacityVertical] = React.useState(100);\n  const [baselineVertical, setBaselineVertical] = React.useState(8);\n  const [colourHorizontal, setColourHorizontal] = React.useState(\"#00ff00\");\n  const [opacityHorizontal, setOpacityHorizontal] = React.useState(100);\n  const [baselineHorizontal, setBaselineHorizontal] = React.useState(8);\n\n  function handleColour(e) {\n    const grid = e.currentTarget.dataset.grid;\n    if (grid === \"vertical\") {\n      setColourVertical(e.currentTarget.value);\n    } else {\n      setColourHorizontal(e.currentTarget.value);\n    }\n  }\n\n  function handleBaseline(e) {\n    const grid = e.currentTarget.dataset.grid;\n    if (grid === \"vertical\") {\n      setBaselineVertical(e.currentTarget.value);\n    } else {\n      setBaselineHorizontal(e.currentTarget.value);\n    }\n  }\n\n  function handleOpacity(e) {\n    const grid = e.currentTarget.dataset.grid;\n    if (grid === \"vertical\") {\n      setOpacityVertical(e.currentTarget.value);\n    } else {\n      setOpacityHorizontal(e.currentTarget.value);\n    }\n  }\n\n  React.useEffect(() => {\n    /* Note: renders based on first load */\n    if (ENV_EXTENSION) {\n      // Load up Baseliner script\n      chrome.tabs.executeScript(null, { file: \"/baseliner.js\" });\n\n      // Start listening to messages\n      chrome.runtime.onMessage.addListener(function(message) {\n        switch (message?.status) {\n          case \"ready\":\n            setStatusLabel(\"Baseliner extension ready\");\n            setIsFirstRun(false);\n            break;\n\n          case \"update\":\n            setStatusLabel(\"Baseliner styles updated\");\n            break;\n\n          case \"load\":\n            setStatusLabel(\"Baseliner loaded from storage\");\n            setIsFirstRun(false);\n            console.log({ storage: message.storage });\n            break;\n\n          default:\n            // Note: needed at all?\n            console.error(\"No recognized status message\", message);\n        }\n      });\n    }\n  }, [ENV_EXTENSION]);\n\n  React.useEffect(() => {\n    /* Note: renders based on UI changes OR when isFirstRun updates */\n    if (ENV_EXTENSION && !isFirstRun) {\n      const colourVerticalRGB = hexToRGB(colourVertical);\n      const vertical = {\n        red: colourVerticalRGB.r,\n        green: colourVerticalRGB.g,\n        blue: colourVerticalRGB.b,\n        opacity: opacityVertical,\n        baseline: baselineVertical\n      };\n      const colourHorizontalRGB = hexToRGB(colourHorizontal);\n      const horizontal = {\n        red: colourHorizontalRGB.r,\n        green: colourHorizontalRGB.g,\n        blue: colourHorizontalRGB.b,\n        opacity: opacityHorizontal,\n        baseline: baselineHorizontal\n      };\n\n      // Generate and apply styles\n      chrome.tabs.executeScript({\n        code: `Baseliner.generateStyles(${vertical.red}, ${vertical.blue}, ${vertical.green}, ${vertical.opacity} ,${vertical.baseline}, ${horizontal.red}, ${horizontal.blue}, ${horizontal.green}, ${horizontal.opacity} ,${horizontal.baseline})`\n      });\n\n      // Save to storage\n      // TODO on hold for now\n      // chrome.tabs.executeScript({\n      //   code: `Baseliner.saveToStorage({verticalRed:${vertical.red}, verticalBlue:${vertical.blue}, verticalGreen:${vertical.green}, verticalOpacity: ${vertical.opacity} , verticalBaseline: ${vertical.baseline}, horizontalRed: ${horizontal.red}, horizontalBlue: ${horizontal.blue}, horizontalGreen: ${horizontal.green}, horizontalOpacity: ${horizontal.opacity} ,horizontalBaseline: ${horizontal.baseline}})`\n      // });\n    }\n  }, [\n    isFirstRun,\n    colourVertical,\n    colourHorizontal,\n    opacityVertical,\n    opacityHorizontal,\n    baselineVertical,\n    baselineHorizontal\n  ]);\n\n  return (\n    <div className=\"Popup\">\n      <p>Status: {statusLabel}</p>\n      <div className={\"grid vertical\"}>\n        <h1>Vertical</h1>\n        <div className={\"row\"}>\n          <label htmlFor={\"colourVertical\"}>Colour</label>\n          <input\n            type=\"color\"\n            id=\"colourVertical\"\n            value={colourVertical}\n            data-grid=\"vertical\"\n            onChange={handleColour}\n          />\n        </div>\n\n        <div className={\"row\"}>\n          <label htmlFor={\"opacityVertical\"}>Opacity</label>\n          <input\n            type=\"range\"\n            min={0}\n            max={100}\n            id=\"opacityVertical\"\n            value={opacityVertical}\n            data-grid=\"vertical\"\n            onChange={handleOpacity}\n          />\n          <span>{opacityVertical}%</span>\n        </div>\n\n        <div className={\"row\"}>\n          <label htmlFor={\"baselineVertical\"}>Baseline</label>\n          <input\n            type=\"number\"\n            min={2}\n            id=\"baselineVertical\"\n            value={baselineVertical}\n            data-grid=\"vertical\"\n            onChange={handleBaseline}\n          />\n        </div>\n      </div>\n      <div className={\"grid horizontal\"}>\n        <h1>Horizontal</h1>\n        <div className={\"row\"}>\n          <label htmlFor={\"colourHorizontal\"}>Colour</label>\n          <input\n            type=\"color\"\n            id=\"colourHorizontal\"\n            value={colourHorizontal}\n            data-grid=\"horizontal\"\n            onChange={handleColour}\n          />\n        </div>\n\n        <div className={\"row\"}>\n          <label htmlFor={\"opacityHorizontal\"}>Opacity</label>\n          <input\n            type=\"range\"\n            min={0}\n            max={100}\n            id=\"opacityHorizontal\"\n            value={opacityHorizontal}\n            data-grid=\"horizontal\"\n            onChange={handleOpacity}\n          />\n          <span>{opacityHorizontal}%</span>\n        </div>\n\n        <div className={\"row\"}>\n          <label htmlFor={\"baselineHorizontal\"}>Baseline</label>\n          <input\n            type=\"number\"\n            min={2}\n            id=\"baselineHorizontal\"\n            value={baselineHorizontal}\n            data-grid=\"horizontal\"\n            onChange={handleBaseline}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Popup;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Popup from \"./Popup\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Popup />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}